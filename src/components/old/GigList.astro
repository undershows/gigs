---
import type { CollectionEntry } from "astro:content";
import {
  getDaysInMonth,
  getDate,
  parse,
  format,
  isAfter,
  isEqual,
  startOfDay,
} from "date-fns";
import locale from "date-fns/locale/pt-BR/index.js";
import * as R from "ramda";
import { t } from "i18next";
import { Image } from "@astrojs/image/components";

interface Props {
  state: CollectionEntry<"state">;
}

type Gig = {
  poster: string;
  date: string;
  city: string;
  daysGroup?: string;
};

type ParsedGig = Gig & {
  date: Date;
  monthNumber: string;
};

type GigsByDaysGroup = [string, ParsedGig[]];
type GigsByMonth = [string, GigsByDaysGroup[]];

const { state } = Astro.props;

/**
 * Check if the first date is after or equal the second one.
 *
 * @param {Date} date
 * @param {Date} dateToCompare
 * @returns {boolean}
 */
const isAfterOrEqual = (date: Date, dateToCompare: Date) =>
  isAfter(date, dateToCompare) || isEqual(date, dateToCompare);

/**
 * Returns a days group from a date.
 *
 * @param {Date} date
 * @returns {string}
 */
const daysGroupFromDate = (date: Date) => {
  const daysGroups = Array.from(
    { length: getDaysInMonth(date) },
    (_, x: number) => x + 1
  );

  return R.pipe(
    R.splitEvery(4),
    R.find((days: number[]) => R.includes(getDate(date), days)),
    R.map((day: number) => R.toString(day).padStart(2, "0")),
    R.join("/")
  )(daysGroups);
};

/**
 * Get formatted month name.
 *
 * @param {string} monthNumber
 * @return {string}
 */
const getFormattedMonthName = (monthNumber: string) => {
  const month = parse(monthNumber, "M", Date.now());
  const monthName = format(month, "MMMM");

  return R.toUpper(`${t(`month.${monthName}`)}/${monthName}`);
};

/**
 * Get image alt.
 */
const getImageAlt = (gig: ParsedGig) =>
  `Cartaz de show em ${gig.city}, ${format(gig.date, "PPP 'às' HH:mm", {
    locale,
  })}`;

/**
 * Gigs grouped by months and day groups.
 */
const gigsByMonth = R.pipe(
  R.defaultTo([]),
  R.map((gig: Gig) => {
    const date = parse(gig.date, "dd/MM/yyyy HH:mm", Date.now());
    return {
      ...gig,
      date,
      daysGroup: gig.daysGroup ?? daysGroupFromDate(date),
      monthNumber: format(date, "M"),
    };
  }),
  R.filter((gig: ParsedGig) =>
    isAfterOrEqual(gig.date, startOfDay(Date.now()))
  ),
  R.sortBy(R.prop("date")),
  R.groupBy(R.prop("monthNumber")),
  R.toPairs,
  R.map(([monthNumber, gigs]: [number, ParsedGig[]]) => [
    monthNumber,
    R.pipe(
      R.groupBy(R.prop("daysGroup")),
      R.toPairs,
      R.sortBy(R.prop(0))
    )(gigs),
  ])
)(state.data.gigs);
---

{
  gigsByMonth.map(([monthNumber, GigsByDaysGroup]: GigsByMonth) => (
    <>
      <p style="font-size:30px; text-align:center;">
        {getFormattedMonthName(monthNumber)}
      </p>
      {GigsByDaysGroup.map(([daysGroup, gigs]: GigsByDaysGroup) => (
        <>
          <p style="font-size:20px; text-align:center;">
            <b>{daysGroup}</b>
          </p>
          {gigs.map((gig: ParsedGig) => (
            <>
              <p style="font-size:20px; text-align:center;">
                <b>
                  {gig.city}/{state.data.abbr} ↓↓↓
                </b>
              </p>
              <Image
                src={`/images/posters/${gig.poster}`}
                alt={getImageAlt(gig)}
                width={600}
                height={800}
                format="webp"
              />
            </>
          ))}
        </>
      ))}
    </>
  ))
}
