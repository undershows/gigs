---
import type { CollectionEntry } from "astro:content";
import {
  getDaysInMonth,
  getDate,
  parse,
  format,
  isAfter,
  isEqual,
  startOfDay,
} from "date-fns";
import { ptBR } from "date-fns/locale";
import * as R from "ramda";
import { Image } from "astro:assets";

interface Props {
  state: CollectionEntry<"state">;
}

type Gig = {
  poster: string;
  date: string;
  city: string;
  daysGroup?: string;
  ticketsUrl?: string;
};

type ParsedGig = Gig & {
  date: Date;
  monthNumber: string;
};

type GigsByDaysGroup = [string, ParsedGig[]];
type GigsByMonth = [string, GigsByDaysGroup[]];

const { state } = Astro.props;

const isAfterOrEqual = (date: Date, dateToCompare: Date) =>
  isAfter(date, dateToCompare) || isEqual(date, dateToCompare);

const daysGroupFromDate = (date: Date) => {
  const daysGroups = Array.from(
    { length: getDaysInMonth(date) },
    (_, x: number) => x + 1
  );

  return R.pipe(
    R.splitEvery(4),
    R.find((days: readonly number[]) => R.includes(getDate(date), days)) as (list: readonly number[][]) => readonly number[],
    R.map((day: number) => R.toString(day).padStart(2, "0")),
    R.join("/")
  )(daysGroups);
};

const getFormattedMonthName = (monthNumber: string) => {
  const month = parse(monthNumber, "M-yyyy", Date.now());
  const localizedMonthName = format(month, "MMMM", { locale: ptBR });
  const englishMonthName = format(month, "MMMM");

  return `${localizedMonthName.toUpperCase()}/${englishMonthName.toUpperCase()}`;
};

const getImageAlt = (gig: ParsedGig) =>
  `Cartaz de show em ${gig.city}, ${format(gig.date, "PPP 'às' HH:mm", {
    locale: ptBR,
  })}`;

const gigsByMonth = R.pipe(
  R.defaultTo([]),
  R.map((gig: Gig) => {
    const date = parse(gig.date, "dd/MM/yyyy HH:mm", Date.now());
    return {
      ...gig,
      date,
      daysGroup: gig.daysGroup ?? daysGroupFromDate(date),
      monthNumber: format(date, "M-yyyy"),
    };
  }),
  R.filter((gig: ParsedGig) =>
    isAfterOrEqual(gig.date, startOfDay(Date.now()))
  ),
  R.sortBy(R.prop("date")),
  R.groupBy(R.prop("monthNumber")),
  R.toPairs,
  R.map(([monthNumber, gigs]: [number, ParsedGig[]]) => [
    monthNumber,
    R.pipe(
      R.groupBy(R.prop("daysGroup")),
      R.toPairs,
      R.sortBy(R.prop(0))
    )(gigs),
  ])
)(state.data.gigs);
---

{gigsByMonth.map(([monthNumber, GigsByDaysGroup]: GigsByMonth) => (
  <>
    <p class="gig-month">
      {getFormattedMonthName(monthNumber)}
    </p>
    {GigsByDaysGroup.map(([daysGroup, gigs]: GigsByDaysGroup) => (
      <>
        <p class="gig-day">
          <b>{daysGroup}</b>
        </p>
        {gigs.map((gig: ParsedGig) => (
          <>
            <p class="gig-city">
              <b>{gig.city}/{state.data.abbr} ↓↓↓</b>
            </p>
            <div class="gig-container">
              <Image
                src={`/images/posters/${gig.poster}`}
                alt={getImageAlt(gig)}
                width={600}
                height={800}
                format="webp"
                class="gig-poster"
              />
              {gig.ticketsUrl && (
                <a href={gig.ticketsUrl} class="tickets-btn" target="_blank">
                  <img src="/images/icons/ticket.svg" class="tickets-btn__icon" alt="Ícone de ingresso" />
                  <span class="tickets-btn__text">Comprar ingressos</span>
                </a>
              )}
            </div>
          </>
        ))}
      </>
    ))}
  </>
))}

<style>
  .gig-container {
    width: 100%;
    max-width: 100%;
    padding: 0 12px;
    box-sizing: border-box;
  }

  .gig-poster {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 0 auto;
  }

  .tickets-btn {
    display: block;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
    padding: 0.5rem;
    box-sizing: border-box;
    border-radius: 0 0 10px 10px;
    text-decoration: none;
    background-color: #66223d;
    color: #fff;
  }

  .tickets-btn:hover .tickets-btn__text {
    text-decoration: underline;
  }

  .tickets-btn__icon {
    display: inline-block;
    width: 30px;
    height: 30px;
    margin-right: 0.5rem;
  }

  .tickets-btn__text {
    display: inline-block;
    padding-top: 0.2rem;
    vertical-align: top;
    font-family: Arial, Helvetica, sans-serif;
    font-size: 1.3rem;
  }
</style>