---
import type { CollectionEntry } from "astro:content";
import {
  getDaysInMonth,
  getDate,
  parse,
  format,
  isAfter,
  isEqual,
  startOfDay,
} from "date-fns";
import { ptBR } from "date-fns/locale";
import * as R from "ramda";
import { Image } from "astro:assets";

interface Props {
  state: CollectionEntry<"state">;
}

type Gig = {
  poster: string;
  date: string;
  city: string;
  daysGroup?: string;
  ticketsUrl?: string;
  title?: string;
  where?: string;
};

type ParsedGig = Gig & {
  date: Date;
  monthNumber: string;
};

type GigsByDaysGroup = [string, ParsedGig[]];
type GigsByMonth = [string, GigsByDaysGroup[]];

const { state } = Astro.props;

const isAfterOrEqual = (date: Date, dateToCompare: Date) =>
  isAfter(date, dateToCompare) || isEqual(date, dateToCompare);

const daysGroupFromDate = (date: Date) => {
  const daysGroups = Array.from(
    { length: getDaysInMonth(date) },
    (_, x: number) => x + 1
  );

  return R.pipe(
    R.splitEvery(4),
    R.find((days: readonly number[]) => R.includes(getDate(date), days)) as (list: readonly number[][]) => readonly number[],
    R.map((day: number) => R.toString(day).padStart(2, "0")),
    R.join("/")
  )(daysGroups);
};

const getFormattedMonthName = (monthNumber: string) => {
  const month = parse(monthNumber, "M-yyyy", Date.now());
  const localizedMonthName = format(month, "MMMM", { locale: ptBR });
  const englishMonthName = format(month, "MMMM");

  return `${localizedMonthName.toUpperCase()}/${englishMonthName.toUpperCase()}`;
};

const getImageAlt = (gig: ParsedGig) =>
  `Cartaz de show em ${gig.city}, ${format(gig.date, "PPP 'às' HH:mm", {
    locale: ptBR,
  })}`;

  function parseInBrazil(dateStr: string): Date {
  const [day, month, yearAndTime] = dateStr.split('/');
  const [year, time] = yearAndTime.split(' ');
  const [hours, minutes] = time.split(':');

  return new Date(
    Number(year),
    Number(month) - 1,
    Number(day),
    Number(hours),
    Number(minutes)
  );
}

const gigsByMonth = R.pipe(
  R.defaultTo([]),
  R.map((gig: Gig) => {
    const date = parseInBrazil(gig.date);
    return {
      ...gig,
      date,
      daysGroup: gig.daysGroup ?? daysGroupFromDate(date),
      monthNumber: format(date, "M-yyyy"),
    };
  }),
  R.filter((gig: ParsedGig) =>
    isAfterOrEqual(gig.date, startOfDay(Date.now()))
  ),
  R.sortBy(R.prop("date")),
  R.groupBy(R.prop("monthNumber")),
  R.toPairs,
  R.map(([monthNumber, gigs]: [number, ParsedGig[]]) => [
    monthNumber,
    R.pipe(
      R.groupBy(R.prop("daysGroup")),
      R.toPairs,
      R.sortBy(R.prop(0))
    )(gigs),
  ])
)(state.data.gigs);
---

{gigsByMonth.map(([monthNumber, GigsByDaysGroup]: GigsByMonth) => (
  <>
    <p class="gig-month">
      {getFormattedMonthName(monthNumber)}
    </p>
    {GigsByDaysGroup.map(([daysGroup, gigs]: GigsByDaysGroup) => (
      <>
        <p class="gig-day">
          <b>{daysGroup}</b>
        </p>
        {gigs.map((gig: ParsedGig) => {
          const fullTitle = gig.title ?? "Show";
          const lines = [];
          if (gig.ticketsUrl) {
            lines.push(`Ingressos: ${gig.ticketsUrl}`);
          }
          lines.push('Divulgação: Undershows');
          const details = encodeURIComponent(lines.join('\n'));
          const location = gig.where ?? `${gig.city}/${state.data.abbr}`;
          const startDate = new Date(gig.date.getTime() + 3 * 60 * 60 * 1000);
          const endDate = new Date(startDate.getTime() + 1 * 60 * 1000);
          const start = format(startDate, "yyyyMMdd'T'HHmmss'Z'");
          const end = format(endDate, "yyyyMMdd'T'HHmmss'Z'");

          const calendarUrl = `https://www.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(fullTitle)}&dates=${start}/${end}&details=${details}&location=${encodeURIComponent(location)}`;

          return (
            <>
              <p class="gig-city">
                <b>{gig.city}/{state.data.abbr} ↓↓↓</b>
              </p>
              <div class="gig-container">
                <Image
                  src={`/images/posters/${gig.poster}`}
                  alt={getImageAlt(gig)}
                  width={600}
                  height={800}
                  format="webp"
                  class="gig-poster"
                />
                {gig.ticketsUrl && (
                  <a href={gig.ticketsUrl} class="tickets-btn" target="_blank">
                    <img src="/images/icons/ticket.svg" class="tickets-btn__icon" alt="Ícone de ingresso" />
                    <span class="tickets-btn__text">Comprar ingressos</span>
                  </a>
                )}
                <a href={calendarUrl} target="_blank" class="calendar-btn" rel="noopener noreferrer">
                  📅 Adicionar no calendário
                </a>
              </div>
            </>
          );
        })}
      </>
    ))}
  </>
))}